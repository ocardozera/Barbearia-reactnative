{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Mytextinput from \"../components/Mytextinput\";\nimport Mybutton from \"../components/Mybutton\";\nimport { DatabaseConnection } from \"../../database/database-connection\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar db = DatabaseConnection.getConnection();\nvar listaTipoServico = [];\n\nvar buscaFuncionarios = function buscaFuncionarios() {\n  if (listaFuncionarios.length == 0) {\n    useEffect(function () {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM table_funcionario', [], function (tx, results) {\n          var temp = [];\n\n          for (var i = 0; i < results.rows.length; ++i) {\n            listaFuncionarios.push(results.rows.item(i));\n          }\n        });\n      });\n    }, []);\n  }\n};\n\nvar buscaTipoServico = function buscaTipoServico() {\n  if (listaTipoServico.length == 0) {\n    useEffect(function () {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM table_tipo_servico', [], function (tx, results) {\n          var temp = [];\n\n          for (var i = 0; i < results.rows.length; ++i) {\n            listaTipoServico.push(results.rows.item(i));\n          }\n        });\n      });\n    }, []);\n  }\n};\n\nvar RegisterServicoRealizado = function RegisterServicoRealizado(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      nomeFuncionario = _useState2[0],\n      setFuncionario = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nomeCliente = _useState4[0],\n      setNomeCliente = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nomeServico = _useState6[0],\n      setNomeServico = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      precoServico = _useState8[0],\n      setPrecoServico = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      selectedValueFuncionario = _useState10[0],\n      setSelectedValueFuncionario = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      selectedValueTipoServico = _useState12[0],\n      setSelectedValueTipoServico = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedValueTipoServicoPreco = _useState14[0],\n      setSelectedValueTipoServicoPreco = _useState14[1];\n\n  console.log(\"selectedValueFuncionario\" + selectedValueFuncionario);\n  console.log(\"selectedValueTipoServico\" + selectedValueTipoServico);\n  console.log(\"selectedValueTipoServicoPreco\" + selectedValueTipoServicoPreco);\n\n  var register_user = function register_user() {\n    if (!nomeCliente) {\n      alert('Por favor preencha o nome do Cliente!');\n      return;\n    }\n\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO table_servico_realizado (cliente_nome, funcionario_id, tipo_servico_id) VALUES (?,?,?)', [nomeCliente, selectedValueFuncionario, selectedValueTipoServico], function (tx, results) {\n        console.log(\"nomeCliente: \" + nomeCliente);\n        console.log(\"selectedValueFuncionario: \" + selectedValueFuncionario);\n        console.log(\"selectedValueTipoServico: \" + selectedValueTipoServico);\n        console.log('Results', results.rowsAffected);\n\n        if (results.rowsAffected > 0) {\n          Alert.alert('Sucesso', 'Serviço Realizado Registrado com Sucesso !!!', [{\n            text: 'Ok',\n            onPress: function onPress() {\n              return navigation.navigate('HomeScreenServicoRealizado');\n            }\n          }], {\n            cancelable: false\n          });\n        } else alert('Erro ao tentar Registrar o Serviço Realizado!!!');\n      });\n    });\n  };\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      listaFuncionarios = _useState16[0],\n      setListaFuncionarios = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      listaTipoServico = _useState18[0],\n      setListaTipoServico = _useState18[1];\n\n  useEffect(function () {\n    function fetchMyAPI() {\n      return _regeneratorRuntime.async(function fetchMyAPI$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              db.transaction(function (tx) {\n                tx.executeSql('SELECT * FROM table_funcionario', [], function (tx, results) {\n                  setListaFuncionarios(Array.from(results.rows));\n                });\n              });\n              db.transaction(function (tx) {\n                tx.executeSql('SELECT * FROM table_tipo_servico', [], function (tx, results) {\n                  setListaTipoServico(Array.from(results.rows));\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchMyAPI();\n  }, []);\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'white'\n      },\n      children: _jsx(View, {\n        style: {\n          flex: 1\n        },\n        children: _jsx(ScrollView, {\n          keyboardShouldPersistTaps: \"handled\",\n          children: _jsxs(KeyboardAvoidingView, {\n            behavior: \"padding\",\n            style: {\n              flex: 1,\n              justifyContent: 'space-between'\n            },\n            children: [_jsx(Mytextinput, {\n              placeholder: \"Nome do Cliente\",\n              onChangeText: function onChangeText(nomeCliente) {\n                return setNomeCliente(nomeCliente);\n              },\n              style: {\n                padding: 10\n              }\n            }), _jsx(Picker, {\n              style: styles.button,\n              multiple: false,\n              selectedValue: selectedValueFuncionario,\n              onValueChange: function onValueChange(itemValue, itemIndex) {\n                return setSelectedValueFuncionario(itemValue);\n              },\n              children: listaFuncionarios.map(function (v) {\n                return _jsx(Picker.Item, {\n                  label: v.funcionario_nome,\n                  value: v.funcionario_id\n                }, v.funcionario_id);\n              })\n            }), _jsx(Picker, {\n              style: styles.button,\n              multiple: false,\n              selectedValue: selectedValueTipoServico,\n              onValueChange: function onValueChange(itemValue, itemIndex) {\n                return setSelectedValueTipoServico(itemValue);\n              },\n              children: listaTipoServico.map(function (v) {\n                return _jsx(Picker.Item, {\n                  label: v.nome_servico + \" \" + v.preco_servico,\n                  value: v.tipo_servico_id\n                }, v.tipo_servico_id);\n              })\n            }), _jsx(Mybutton, {\n              title: \"Salvar\",\n              customClick: register_user\n            })]\n          })\n        })\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    marginLeft: 25,\n    marginRight: 25,\n    marginTop: 10,\n    borderColor: '#00AD98',\n    borderWidth: 1,\n    borderRadius: 20,\n    right: 35\n  }\n});\nexport default RegisterServicoRealizado;","map":{"version":3,"sources":["F:/Programas/React/Barbearia-reactnative/src/pages/servico-realizado/RegisterServicoRealizado.js"],"names":["React","useState","useEffect","Mytextinput","Mybutton","DatabaseConnection","db","getConnection","listaTipoServico","buscaFuncionarios","listaFuncionarios","length","transaction","tx","executeSql","results","temp","i","rows","push","item","buscaTipoServico","RegisterServicoRealizado","navigation","nomeFuncionario","setFuncionario","nomeCliente","setNomeCliente","nomeServico","setNomeServico","precoServico","setPrecoServico","selectedValueFuncionario","setSelectedValueFuncionario","selectedValueTipoServico","setSelectedValueTipoServico","selectedValueTipoServicoPreco","setSelectedValueTipoServicoPreco","console","log","register_user","alert","rowsAffected","Alert","text","onPress","navigate","cancelable","setListaFuncionarios","setListaTipoServico","fetchMyAPI","Array","from","flex","backgroundColor","justifyContent","padding","styles","button","itemValue","itemIndex","map","v","funcionario_nome","funcionario_id","nome_servico","preco_servico","tipo_servico_id","StyleSheet","create","marginLeft","marginRight","marginTop","borderColor","borderWidth","borderRadius","right"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    View,\r\n    ScrollView,\r\n    KeyboardAvoidingView,\r\n    Alert,\r\n    SafeAreaView,\r\n    Picker, StyleSheet\r\n} from 'react-native';\r\nimport Mytextinput from '../components/Mytextinput';\r\nimport Mybutton from '../components/Mybutton';\r\nimport { DatabaseConnection } from '../../database/database-connection';\r\n\r\nconst db = DatabaseConnection.getConnection();\r\n\r\n\r\nconst listaTipoServico = [];\r\n\r\nconst buscaFuncionarios = () => {\r\n    if (listaFuncionarios.length == 0) {\r\n        useEffect(() => {\r\n            db.transaction((tx) => {\r\n                tx.executeSql(\r\n                    'SELECT * FROM table_funcionario',\r\n                    [],\r\n                    (tx, results) => {\r\n                        var temp = [];\r\n                        for (let i = 0; i < results.rows.length; ++i)\r\n                            listaFuncionarios.push(results.rows.item(i));\r\n                    }\r\n                );\r\n            });\r\n        }, []);\r\n    }\r\n};\r\n\r\nconst buscaTipoServico = () => {\r\n    if (listaTipoServico.length == 0) {\r\n        useEffect(() => {\r\n            db.transaction((tx) => {\r\n                tx.executeSql(\r\n                    'SELECT * FROM table_tipo_servico',\r\n                    [],\r\n                    (tx, results) => {\r\n                        var temp = [];\r\n                        for (let i = 0; i < results.rows.length; ++i)\r\n                            listaTipoServico.push(results.rows.item(i));\r\n                    }\r\n                );\r\n            });\r\n        }, []);\r\n    }\r\n};\r\n\r\nconst RegisterServicoRealizado = ({navigation}) => {\r\n    // buscaFuncionarios();\r\n    // buscaTipoServico();\r\n\r\n    let [nomeFuncionario, setFuncionario] = useState('');\r\n    let [nomeCliente, setNomeCliente] = useState('');\r\n    let [nomeServico, setNomeServico] = useState('');\r\n    let [precoServico, setPrecoServico] = useState('')\r\n    //\r\n    let [selectedValueFuncionario, setSelectedValueFuncionario] = useState('');\r\n    let [selectedValueTipoServico, setSelectedValueTipoServico] = useState('');\r\n    let [selectedValueTipoServicoPreco, setSelectedValueTipoServicoPreco] = useState('');\r\n\r\n    console.log(\"selectedValueFuncionario\" + selectedValueFuncionario);\r\n    console.log(\"selectedValueTipoServico\" + selectedValueTipoServico);\r\n    console.log(\"selectedValueTipoServicoPreco\" + selectedValueTipoServicoPreco);\r\n\r\n    let register_user = () => {\r\n\r\n        if (!nomeCliente) {\r\n            alert('Por favor preencha o nome do Cliente!');\r\n            return;\r\n        }\r\n        db.transaction(function (tx) {\r\n            tx.executeSql(\r\n                'INSERT INTO table_servico_realizado (cliente_nome, funcionario_id, tipo_servico_id) VALUES (?,?,?)',\r\n                [nomeCliente, selectedValueFuncionario, selectedValueTipoServico],\r\n                (tx, results) => {\r\n                    console.log(\"nomeCliente: \" + nomeCliente);\r\n                    console.log(\"selectedValueFuncionario: \" + selectedValueFuncionario);\r\n                    console.log(\"selectedValueTipoServico: \" + selectedValueTipoServico);\r\n\r\n                    console.log('Results', results.rowsAffected);\r\n                    if (results.rowsAffected > 0) {\r\n                        Alert.alert(\r\n                            'Sucesso',\r\n                            'Serviço Realizado Registrado com Sucesso !!!',\r\n                            [\r\n                                {\r\n                                    text: 'Ok',\r\n                                    onPress: () => navigation.navigate('HomeScreenServicoRealizado'),\r\n                                },\r\n                            ],\r\n                            {cancelable: false}\r\n                        );\r\n                    } else alert('Erro ao tentar Registrar o Serviço Realizado!!!');\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    let [listaFuncionarios, setListaFuncionarios] = useState([]);\r\n\r\n    let [listaTipoServico, setListaTipoServico] = useState([]);\r\n\r\n\r\n\r\n        useEffect(() => {\r\n            async function fetchMyAPI() {\r\n                db.transaction((tx) => {\r\n                    tx.executeSql(\r\n                        'SELECT * FROM table_funcionario',\r\n                        [],\r\n                        (tx, results) => {\r\n                            setListaFuncionarios(Array.from(results.rows));\r\n                        }\r\n                    );\r\n                });\r\n\r\n                db.transaction((tx) => {\r\n                    tx.executeSql(\r\n                        'SELECT * FROM table_tipo_servico',\r\n                        [],\r\n                        (tx, results) => {\r\n                            setListaTipoServico(Array.from(results.rows));\r\n                        }\r\n                    );\r\n                });\r\n            }\r\n\r\n            fetchMyAPI()\r\n        }, [])\r\n\r\n    return (\r\n        <SafeAreaView style={{flex: 1}}>\r\n            <View style={{flex: 1, backgroundColor: 'white'}}>\r\n                <View style={{flex: 1}}>\r\n\r\n                    <ScrollView keyboardShouldPersistTaps=\"handled\">\r\n\r\n                        <KeyboardAvoidingView\r\n                            behavior=\"padding\"\r\n                            style={{flex: 1, justifyContent: 'space-between'}}>\r\n\r\n                            {/*<Mytextinput*/}\r\n                            {/*    placeholder=\"Nome do Funcionário\"*/}\r\n                            {/*    onChangeText={*/}\r\n                            {/*        (nomeFuncionario) => setFuncionario(nomeFuncionario)*/}\r\n                            {/*    }*/}\r\n                            {/*    style={{padding: 10}}*/}\r\n                            {/*/>*/}\r\n                            <Mytextinput\r\n                                placeholder=\"Nome do Cliente\"\r\n                                onChangeText={\r\n                                    (nomeCliente) => setNomeCliente(nomeCliente)\r\n                                }\r\n                                style={{padding: 10}}\r\n                            />\r\n                            {/*<Mytextinput*/}\r\n                            {/*    placeholder=\"Nome do Serviço\"*/}\r\n                            {/*    onChangeText={*/}\r\n                            {/*        (nomeServico) => setNomeServico(nomeServico)*/}\r\n                            {/*    }*/}\r\n                            {/*    style={{padding: 10}}*/}\r\n                            {/*/>*/}\r\n                            {/*<Mytextinput*/}\r\n                            {/*    placeholder=\"Valor do serviço\"*/}\r\n                            {/*    onChangeText={*/}\r\n                            {/*        (precoServico) => setPrecoServico(precoServico)*/}\r\n                            {/*    }*/}\r\n                            {/*    maxLength={11}*/}\r\n                            {/*    keyboardType=\"numeric\"*/}\r\n                            {/*    style={{padding: 10}}*/}\r\n                            {/*/>*/}\r\n\r\n                            <Picker\r\n                                style={styles.button}\r\n                                multiple={false}\r\n                                selectedValue={selectedValueFuncionario}\r\n                                onValueChange={(itemValue, itemIndex) => setSelectedValueFuncionario(itemValue)}>{\r\n                                listaFuncionarios.map((v) => (\r\n                                        <Picker.Item label={v.funcionario_nome} value={v.funcionario_id}\r\n                                                     key={v.funcionario_id}/>\r\n                                    )\r\n                                )\r\n                            }\r\n                            </Picker>\r\n\r\n                            <Picker\r\n                                style={styles.button}\r\n                                multiple={false}\r\n                                selectedValue={selectedValueTipoServico}\r\n                                onValueChange={(itemValue, itemIndex) => setSelectedValueTipoServico(itemValue)}>\r\n                                {listaTipoServico.map((v) => (\r\n                                        <Picker.Item label={v.nome_servico + \" \" + v.preco_servico} value={v.tipo_servico_id}\r\n                                                     key={v.tipo_servico_id}/>\r\n                                    )\r\n                                )\r\n                            }\r\n                            </Picker>\r\n\r\n                            <Mybutton title=\"Salvar\" customClick={register_user}/>\r\n                        </KeyboardAvoidingView>\r\n                    </ScrollView>\r\n\r\n                </View>\r\n            </View>\r\n        </SafeAreaView>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    button: {\r\n        marginLeft: 25,\r\n        marginRight: 25,\r\n        marginTop: 10,\r\n        borderColor: '#00AD98',\r\n        borderWidth: 1,\r\n        borderRadius: 20,\r\n        right: 35,\r\n    },\r\n});\r\n\r\nexport default RegisterServicoRealizado;\r\n"]},"metadata":{},"sourceType":"module"}