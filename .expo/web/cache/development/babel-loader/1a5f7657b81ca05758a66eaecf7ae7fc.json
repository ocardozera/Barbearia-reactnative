{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Programas\\\\React\\\\Barbearia-reactnative\\\\src\\\\pages\\\\tipo-servico\\\\UpdateTipoServico.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Mytextinput from \"../components/Mytextinput\";\nimport Mybutton from \"../components/Mybutton\";\nimport { DatabaseConnection } from \"../../database/database-connection\";\nimport { TextInputMask } from \"react-native-masked-text\";\nvar db = DatabaseConnection.getConnection();\n\nvar UpdateTipoServico = function UpdateTipoServico(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputServicoId = _useState2[0],\n      setInputServicoId = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      servicoNome = _useState4[0],\n      setServicoName = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      servicoPreco = _useState6[0],\n      setServicoPreco = _useState6[1];\n\n  var updateAllStates = function updateAllStates(name, contact, address) {\n    setServicoName(name);\n    setServicoPreco(contact);\n  };\n\n  var searchUser = function searchUser() {\n    console.log(inputServicoId);\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM table_tipo_servico where tipo_servico_id = ?', [inputServicoId], function (tx, results) {\n        var len = results.rows.length;\n\n        if (len > 0) {\n          var res = results.rows.item(0);\n          updateAllStates(res.nome_servico, res.preco_servico);\n        } else {\n          alert('Tipo de Servico não encontrado!');\n          updateAllStates('', '', '');\n        }\n      });\n    });\n  };\n\n  var updateUser = function updateUser() {\n    console.log(inputServicoId, servicoNome, servicoPreco);\n\n    if (!inputServicoId) {\n      alert('Por Favor informe o Código!');\n      return;\n    }\n\n    if (!servicoNome) {\n      alert('Por favor informe o Nome do Serviço !');\n      return;\n    }\n\n    if (!servicoPreco) {\n      alert('Por Favor informe o Preço do Serviço !');\n      return;\n    }\n\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE table_tipo_servico set nome_servico=?, preco_servico=? where tipo_servico_id=?', [servicoNome, servicoPreco, inputServicoId], function (tx, results) {\n        console.log('Results', results.rowsAffected);\n\n        if (results.rowsAffected > 0) {\n          Alert.alert('Sucesso', 'Tipo de serviço atualizado com sucesso !!', [{\n            text: 'Ok',\n            onPress: function onPress() {\n              return navigation.navigate('HomeScreenTipoServico');\n            }\n          }], {\n            cancelable: false\n          });\n        } else alert('Erro ao atualizar o Tipo de serviço');\n      });\n    });\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, React.createElement(ScrollView, {\n    keyboardShouldPersistTaps: \"handled\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    behavior: \"padding\",\n    style: {\n      flex: 1,\n      justifyContent: 'space-between'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }, React.createElement(Mytextinput, {\n    placeholder: \"Digite o C\\xF3digo do Tipo de Servi\\xE7o\",\n    style: {\n      padding: 10\n    },\n    onChangeText: function onChangeText(inputServicoId) {\n      return setInputServicoId(inputServicoId);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }), React.createElement(Mybutton, {\n    title: \"Buscar Tipo de Servi\\xE7o\",\n    customClick: searchUser,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }), React.createElement(Mytextinput, {\n    placeholder: \"Digite o Nome do Servi\\xE7o\",\n    value: servicoNome,\n    style: {\n      padding: 10\n    },\n    onChangeText: function onChangeText(servicoNome) {\n      return setServicoName(servicoNome);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }), React.createElement(TextInputMask, {\n    placeholder: \"Valor do Servi\\xE7o R$\",\n    type: 'money',\n    style: styles.inputText,\n    keyboardType: \"numeric\",\n    blurOnSubmit: false,\n    underlineColorAndroid: \"transparent\",\n    placeholderTextColor: \"#00AD98\",\n    options: {\n      precision: 2,\n      separator: ',',\n      delimiter: '.',\n      unit: 'R$',\n      suffixUnit: ''\n    },\n    value: servicoPreco,\n    onChangeText: function onChangeText(servicoPreco) {\n      return setServicoPreco(servicoPreco);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 29\n    }\n  }), React.createElement(Mybutton, {\n    title: \"Atualizar Tipo de Servi\\xE7o\",\n    customClick: updateUser,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nvar styles = StyleSheet.create({\n  inputText: {\n    marginLeft: 25,\n    marginRight: 25,\n    marginTop: 10,\n    borderColor: '#00AD98',\n    borderWidth: 1,\n    height: 50,\n    padding: 10,\n    borderRadius: 20\n  }\n});\nexport default UpdateTipoServico;","map":{"version":3,"sources":["F:/Programas/React/Barbearia-reactnative/src/pages/tipo-servico/UpdateTipoServico.js"],"names":["React","useState","Mytextinput","Mybutton","DatabaseConnection","TextInputMask","db","getConnection","UpdateTipoServico","navigation","inputServicoId","setInputServicoId","servicoNome","setServicoName","servicoPreco","setServicoPreco","updateAllStates","name","contact","address","searchUser","console","log","transaction","tx","executeSql","results","len","rows","length","res","item","nome_servico","preco_servico","alert","updateUser","rowsAffected","Alert","text","onPress","navigate","cancelable","flex","backgroundColor","justifyContent","padding","styles","inputText","precision","separator","delimiter","unit","suffixUnit","StyleSheet","create","marginLeft","marginRight","marginTop","borderColor","borderWidth","height","borderRadius"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;AASA,OAAOC,WAAP;AACA,OAAOC,QAAP;AACA,SAASC,kBAAT;AACA,SAAQC,aAAR,QAA4B,0BAA5B;AAEA,IAAMC,EAAE,GAAGF,kBAAkB,CAACG,aAAnB,EAAX;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,kBACAR,QAAQ,CAAC,EAAD,CADR;AAAA;AAAA,MACrCS,cADqC;AAAA,MACrBC,iBADqB;;AAAA,mBAENV,QAAQ,CAAC,EAAD,CAFF;AAAA;AAAA,MAErCW,WAFqC;AAAA,MAExBC,cAFwB;;AAAA,mBAGJZ,QAAQ,CAAC,EAAD,CAHJ;AAAA;AAAA,MAGrCa,YAHqC;AAAA,MAGvBC,eAHuB;;AAK1C,MAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,EAA4B;AAC9CN,IAAAA,cAAc,CAACI,IAAD,CAAd;AACAF,IAAAA,eAAe,CAACG,OAAD,CAAf;AACH,GAHD;;AAKI,MAAIE,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACAJ,IAAAA,EAAE,CAACiB,WAAH,CAAe,UAACC,EAAD,EAAQ;AACnBA,MAAAA,EAAE,CAACC,UAAH,CACI,4DADJ,EAEI,CAACf,cAAD,CAFJ,EAGI,UAACc,EAAD,EAAKE,OAAL,EAAiB;AACb,YAAIC,GAAG,GAAGD,OAAO,CAACE,IAAR,CAAaC,MAAvB;;AACA,YAAIF,GAAG,GAAG,CAAV,EAAa;AACT,cAAIG,GAAG,GAAGJ,OAAO,CAACE,IAAR,CAAaG,IAAb,CAAkB,CAAlB,CAAV;AACAf,UAAAA,eAAe,CACXc,GAAG,CAACE,YADO,EAEXF,GAAG,CAACG,aAFO,CAAf;AAIH,SAND,MAMO;AACHC,UAAAA,KAAK,CAAC,iCAAD,CAAL;AACAlB,UAAAA,eAAe,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAf;AACH;AACJ,OAfL;AAiBH,KAlBD;AAmBH,GArBG;;AAsBJ,MAAImB,UAAU,GAAG,SAAbA,UAAa,GAAM;AACnBd,IAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ,EAA4BE,WAA5B,EAAyCE,YAAzC;;AAEA,QAAI,CAACJ,cAAL,EAAqB;AACjBwB,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACA;AACH;;AACD,QAAI,CAACtB,WAAL,EAAkB;AACdsB,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACA;AACH;;AACD,QAAI,CAACpB,YAAL,EAAmB;AACfoB,MAAAA,KAAK,CAAC,wCAAD,CAAL;AACA;AACH;;AAED5B,IAAAA,EAAE,CAACiB,WAAH,CAAe,UAACC,EAAD,EAAQ;AACnBA,MAAAA,EAAE,CAACC,UAAH,CACI,uFADJ,EAEI,CAACb,WAAD,EAAcE,YAAd,EAA4BJ,cAA5B,CAFJ,EAGI,UAACc,EAAD,EAAKE,OAAL,EAAiB;AACbL,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBI,OAAO,CAACU,YAA/B;;AACA,YAAIV,OAAO,CAACU,YAAR,GAAuB,CAA3B,EAA8B;AAC1BC,UAAAA,KAAK,CAACH,KAAN,CACI,SADJ,EAEI,2CAFJ,EAGI,CACI;AACII,YAAAA,IAAI,EAAE,IADV;AAEIC,YAAAA,OAAO,EAAE;AAAA,qBAAM9B,UAAU,CAAC+B,QAAX,CAAoB,uBAApB,CAAN;AAAA;AAFb,WADJ,CAHJ,EASI;AAAEC,YAAAA,UAAU,EAAE;AAAd,WATJ;AAWH,SAZD,MAYOP,KAAK,CAAC,qCAAD,CAAL;AACV,OAlBL;AAoBH,KArBD;AAsBH,GAtCD;;AAwCA,SACI,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEA,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,eAAe,EAAE;AAA5B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAED,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,yBAAyB,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,oBAAD;AACI,IAAA,QAAQ,EAAC,SADb;AAEI,IAAA,KAAK,EAAE;AAAEA,MAAAA,IAAI,EAAE,CAAR;AAAWE,MAAAA,cAAc,EAAE;AAA3B,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,WAAD;AACI,IAAA,WAAW,EAAC,0CADhB;AAEI,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAFX;AAGI,IAAA,YAAY,EACR,sBAACnC,cAAD;AAAA,aAAoBC,iBAAiB,CAACD,cAAD,CAArC;AAAA,KAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAUI,oBAAC,QAAD;AACI,IAAA,KAAK,EAAC,2BADV;AAEI,IAAA,WAAW,EAAEU,UAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAcI,oBAAC,WAAD;AACI,IAAA,WAAW,EAAC,6BADhB;AAEI,IAAA,KAAK,EAAER,WAFX;AAGI,IAAA,KAAK,EAAE;AAAEiC,MAAAA,OAAO,EAAE;AAAX,KAHX;AAII,IAAA,YAAY,EACR,sBAACjC,WAAD;AAAA,aAAiBC,cAAc,CAACD,WAAD,CAA/B;AAAA,KALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,EAsBI,oBAAC,aAAD;AACI,IAAA,WAAW,EAAC,wBADhB;AAEI,IAAA,IAAI,EAAE,OAFV;AAGI,IAAA,KAAK,EAAEkC,MAAM,CAACC,SAHlB;AAII,IAAA,YAAY,EAAC,SAJjB;AAKI,IAAA,YAAY,EAAE,KALlB;AAMI,IAAA,qBAAqB,EAAC,aAN1B;AAOI,IAAA,oBAAoB,EAAC,SAPzB;AAQI,IAAA,OAAO,EAAE;AACLC,MAAAA,SAAS,EAAE,CADN;AAELC,MAAAA,SAAS,EAAE,GAFN;AAGLC,MAAAA,SAAS,EAAE,GAHN;AAILC,MAAAA,IAAI,EAAE,IAJD;AAKLC,MAAAA,UAAU,EAAE;AALP,KARb;AAeI,IAAA,KAAK,EAAEtC,YAfX;AAgBI,IAAA,YAAY,EACR,sBAACA,YAAD;AAAA,aAAkBC,eAAe,CAACD,YAAD,CAAjC;AAAA,KAjBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBJ,EA0CI,oBAAC,QAAD;AACI,IAAA,KAAK,EAAC,8BADV;AAEI,IAAA,WAAW,EAAEqB,UAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1CJ,CADJ,CADJ,CADJ,CADJ,CADJ;AAyDH,CAjID;;AAmIA,IAAMW,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAE;AACPQ,IAAAA,UAAU,EAAE,EADL;AAEPC,IAAAA,WAAW,EAAE,EAFN;AAGPC,IAAAA,SAAS,EAAE,EAHJ;AAIPC,IAAAA,WAAW,EAAE,SAJN;AAKPC,IAAAA,WAAW,EAAE,CALN;AAMPC,IAAAA,MAAM,EAAE,EAND;AAOPf,IAAAA,OAAO,EAAE,EAPF;AAQPgB,IAAAA,YAAY,EAAE;AARP;AADkB,CAAlB,CAAf;AAaA,eAAerD,iBAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    View,\r\n    ScrollView,\r\n    KeyboardAvoidingView,\r\n    Alert,\r\n    SafeAreaView, StyleSheet,\r\n} from 'react-native';\r\n\r\nimport Mytextinput from '../components/Mytextinput';\r\nimport Mybutton from '../components/Mybutton';\r\nimport { DatabaseConnection } from '../../database/database-connection';\r\nimport {TextInputMask} from \"react-native-masked-text\";\r\n\r\nconst db = DatabaseConnection.getConnection();\r\n\r\nconst UpdateTipoServico = ({ navigation }) => {\r\n    let [inputServicoId, setInputServicoId] = useState('');\r\n    let [servicoNome, setServicoName] = useState('');\r\n    let [servicoPreco, setServicoPreco] = useState('');\r\n\r\n    let updateAllStates = (name, contact, address) => {\r\n        setServicoName(name);\r\n        setServicoPreco(contact);\r\n    };\r\n\r\n        let searchUser = () => {\r\n        console.log(inputServicoId);\r\n        db.transaction((tx) => {\r\n            tx.executeSql(\r\n                'SELECT * FROM table_tipo_servico where tipo_servico_id = ?',\r\n                [inputServicoId],\r\n                (tx, results) => {\r\n                    var len = results.rows.length;\r\n                    if (len > 0) {\r\n                        let res = results.rows.item(0);\r\n                        updateAllStates(\r\n                            res.nome_servico,\r\n                            res.preco_servico,\r\n                        );\r\n                    } else {\r\n                        alert('Tipo de Servico não encontrado!');\r\n                        updateAllStates('', '', '');\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    };\r\n    let updateUser = () => {\r\n        console.log(inputServicoId, servicoNome, servicoPreco);\r\n\r\n        if (!inputServicoId) {\r\n            alert('Por Favor informe o Código!');\r\n            return;\r\n        }\r\n        if (!servicoNome) {\r\n            alert('Por favor informe o Nome do Serviço !');\r\n            return;\r\n        }\r\n        if (!servicoPreco) {\r\n            alert('Por Favor informe o Preço do Serviço !');\r\n            return;\r\n        }\r\n\r\n        db.transaction((tx) => {\r\n            tx.executeSql(\r\n                'UPDATE table_tipo_servico set nome_servico=?, preco_servico=? where tipo_servico_id=?',\r\n                [servicoNome, servicoPreco, inputServicoId],\r\n                (tx, results) => {\r\n                    console.log('Results', results.rowsAffected);\r\n                    if (results.rowsAffected > 0) {\r\n                        Alert.alert(\r\n                            'Sucesso',\r\n                            'Tipo de serviço atualizado com sucesso !!',\r\n                            [\r\n                                {\r\n                                    text: 'Ok',\r\n                                    onPress: () => navigation.navigate('HomeScreenTipoServico'),\r\n                                },\r\n                            ],\r\n                            { cancelable: false }\r\n                        );\r\n                    } else alert('Erro ao atualizar o Tipo de serviço');\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n            <View style={{ flex: 1, backgroundColor: 'white' }}>\r\n                <View style={{ flex: 1 }}>\r\n                    <ScrollView keyboardShouldPersistTaps=\"handled\">\r\n                        <KeyboardAvoidingView\r\n                            behavior=\"padding\"\r\n                            style={{ flex: 1, justifyContent: 'space-between' }}>\r\n                            <Mytextinput\r\n                                placeholder=\"Digite o Código do Tipo de Serviço\"\r\n                                style={{ padding: 10 }}\r\n                                onChangeText={\r\n                                    (inputServicoId) => setInputServicoId(inputServicoId)\r\n                                }\r\n                            />\r\n                            <Mybutton\r\n                                title=\"Buscar Tipo de Serviço\"\r\n                                customClick={searchUser}\r\n                            />\r\n                            <Mytextinput\r\n                                placeholder=\"Digite o Nome do Serviço\"\r\n                                value={servicoNome}\r\n                                style={{ padding: 10 }}\r\n                                onChangeText={\r\n                                    (servicoNome) => setServicoName(servicoNome)\r\n                                }\r\n                            />\r\n                            <TextInputMask\r\n                                placeholder=\"Valor do Serviço R$\"\r\n                                type={'money'}\r\n                                style={styles.inputText}\r\n                                keyboardType=\"numeric\"\r\n                                blurOnSubmit={false}\r\n                                underlineColorAndroid=\"transparent\"\r\n                                placeholderTextColor=\"#00AD98\"\r\n                                options={{\r\n                                    precision: 2,\r\n                                    separator: ',',\r\n                                    delimiter: '.',\r\n                                    unit: 'R$',\r\n                                    suffixUnit: ''\r\n                                }}\r\n                                value={servicoPreco}\r\n                                onChangeText={\r\n                                    (servicoPreco) => setServicoPreco(servicoPreco)\r\n                                }\r\n                            />\r\n                            <Mybutton\r\n                                title=\"Atualizar Tipo de Serviço\"\r\n                                customClick={updateUser}\r\n                            />\r\n                        </KeyboardAvoidingView>\r\n                    </ScrollView>\r\n                </View>\r\n            </View>\r\n        </SafeAreaView>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    inputText: {\r\n        marginLeft: 25,\r\n        marginRight: 25,\r\n        marginTop: 10,\r\n        borderColor: '#00AD98',\r\n        borderWidth: 1,\r\n        height: 50,\r\n        padding: 10,\r\n        borderRadius: 20,\r\n    },\r\n});\r\n\r\nexport default UpdateTipoServico;"]},"metadata":{},"sourceType":"module"}