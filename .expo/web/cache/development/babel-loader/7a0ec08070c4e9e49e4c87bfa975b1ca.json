{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Mytextinput from \"../components/Mytextinput\";\nimport Mybutton from \"../components/Mybutton\";\nimport { DatabaseConnection } from \"../../database/database-connection\";\nimport { TextInputMask } from \"react-native-masked-text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar db = DatabaseConnection.getConnection();\n\nvar RegisterFuncionario = function RegisterFuncionario(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userName = _useState2[0],\n      setUserName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userContact = _useState4[0],\n      setUserContact = _useState4[1];\n\n  var register_user = function register_user() {\n    if (!userName) {\n      alert('Por favor preencha o nome do funcinário!');\n      return;\n    }\n\n    if (userName.length < 8) {\n      alert('Nome deve ser possuír ao menos 8 dígitos!');\n      return;\n    }\n\n    if (!userContact) {\n      alert('Por favor preencha o telefone');\n      return;\n    }\n\n    if (userContact.length < 14) {\n      alert('Por favor, preencha o telefone com todos os dígitos');\n      return;\n    }\n\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO table_funcionario (funcionario_nome, funcionario_telefone) VALUES (?,?)', [userName, userContact], function (tx, results) {\n        console.log('Results', results.rowsAffected);\n\n        if (results.rowsAffected > 0) {\n          Alert.alert('Sucesso', 'Funcionario Registrado com Sucesso!!!', [{\n            text: 'Ok',\n            onPress: function onPress() {\n              return navigation.navigate('HomeScreenFuncionario');\n            }\n          }], {\n            cancelable: false\n          });\n        } else alert('Erro ao tentar Registrar o Funcionario !!!');\n      });\n    });\n  };\n\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'white'\n      },\n      children: _jsx(View, {\n        style: {\n          flex: 1\n        },\n        children: _jsx(ScrollView, {\n          keyboardShouldPersistTaps: \"handled\",\n          children: _jsxs(KeyboardAvoidingView, {\n            behavior: \"padding\",\n            style: {\n              flex: 1,\n              justifyContent: 'space-between'\n            },\n            children: [_jsx(Mytextinput, {\n              placeholder: \"Digite o Nome Completo\",\n              onChangeText: function onChangeText(userName) {\n                return setUserName(userName);\n              },\n              style: {\n                padding: 10\n              }\n            }), _jsx(TextInputMask, {\n              placeholder: \"Telefone com Apenas N\\xFAmeros\",\n              maxLength: 15,\n              keyboardType: \"numeric\",\n              blurOnSubmit: false,\n              underlineColorAndroid: \"transparent\",\n              placeholderTextColor: \"#00AD98\",\n              style: styles.inputText,\n              type: 'cel-phone',\n              options: {\n                maskType: 'BRL',\n                withDDD: true,\n                dddMask: '(99) '\n              },\n              value: userContact,\n              onChangeText: function onChangeText(userContact) {\n                return setUserContact(userContact);\n              }\n            }), _jsx(Mybutton, {\n              title: \"Salvar\",\n              customClick: register_user\n            })]\n          })\n        })\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  inputText: {\n    marginLeft: 25,\n    marginRight: 25,\n    marginTop: 10,\n    borderColor: '#00AD98',\n    borderWidth: 1,\n    height: 50,\n    padding: 10,\n    borderRadius: 20\n  }\n});\nexport default RegisterFuncionario;","map":{"version":3,"sources":["F:/Programas/React/Barbearia-reactnative/src/pages/funcionario/RegisterFuncionario.js"],"names":["React","useState","Mytextinput","Mybutton","DatabaseConnection","TextInputMask","db","getConnection","RegisterFuncionario","navigation","userName","setUserName","userContact","setUserContact","register_user","alert","length","transaction","tx","executeSql","results","console","log","rowsAffected","Alert","text","onPress","navigate","cancelable","flex","backgroundColor","justifyContent","padding","styles","inputText","maskType","withDDD","dddMask","StyleSheet","create","marginLeft","marginRight","marginTop","borderColor","borderWidth","height","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  View,\r\n  ScrollView,\r\n  KeyboardAvoidingView,\r\n  Alert,\r\n  SafeAreaView, StyleSheet,\r\n} from 'react-native';\r\nimport Mytextinput from '../components/Mytextinput';\r\nimport Mybutton from '../components/Mybutton';\r\nimport { DatabaseConnection } from '../../database/database-connection';\r\nimport {TextInputMask} from \"react-native-masked-text\";\r\n\r\nconst db = DatabaseConnection.getConnection();\r\n\r\nconst RegisterFuncionario = ({ navigation }) => {\r\n  let [userName, setUserName] = useState('');\r\n  let [userContact, setUserContact] = useState('');\r\n\r\n  let register_user = () => {\r\n    if (!userName) {\r\n      alert('Por favor preencha o nome do funcinário!');\r\n      return;\r\n    }\r\n    if (userName.length < 8) {\r\n      alert('Nome deve ser possuír ao menos 8 dígitos!');\r\n      return;\r\n    }\r\n    if (!userContact) {\r\n      alert('Por favor preencha o telefone');\r\n      return;\r\n    }\r\n    if (userContact.length < 14) {\r\n      alert('Por favor, preencha o telefone com todos os dígitos');\r\n      return;\r\n    }\r\n\r\n    db.transaction(function (tx) {\r\n      tx.executeSql(\r\n        'INSERT INTO table_funcionario (funcionario_nome, funcionario_telefone) VALUES (?,?)',\r\n        [userName, userContact],\r\n        (tx, results) => {\r\n          console.log('Results', results.rowsAffected);\r\n          if (results.rowsAffected > 0) {\r\n            Alert.alert(\r\n              'Sucesso',\r\n              'Funcionario Registrado com Sucesso!!!',\r\n              [\r\n                {\r\n                  text: 'Ok',\r\n                  onPress: () => navigation.navigate('HomeScreenFuncionario'),\r\n                },\r\n              ],\r\n              { cancelable: false }\r\n            );\r\n          } else alert('Erro ao tentar Registrar o Funcionario !!!');\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={{ flex: 1 }}>\r\n      <View style={{ flex: 1, backgroundColor: 'white' }}>\r\n        <View style={{ flex: 1 }}>\r\n          <ScrollView keyboardShouldPersistTaps=\"handled\">\r\n            <KeyboardAvoidingView\r\n              behavior=\"padding\"\r\n              style={{ flex: 1, justifyContent: 'space-between' }}>\r\n\r\n              <Mytextinput\r\n                placeholder=\"Digite o Nome Completo\"\r\n                onChangeText={\r\n                  (userName) => setUserName(userName)\r\n                }\r\n                style={{ padding: 10 }}\r\n              />\r\n\r\n              <TextInputMask\r\n                  placeholder=\"Telefone com Apenas Números\"\r\n                  maxLength={15}\r\n                  keyboardType=\"numeric\"\r\n                  blurOnSubmit={false}\r\n                  underlineColorAndroid=\"transparent\"\r\n                  placeholderTextColor=\"#00AD98\"\r\n                  style={styles.inputText}\r\n                  type={'cel-phone'}\r\n                  options={{\r\n                    maskType: 'BRL',\r\n                    withDDD: true,\r\n                    dddMask: '(99) '\r\n                  }}\r\n                  value={userContact}\r\n                  onChangeText={\r\n                    (userContact) => setUserContact(userContact)\r\n                  }\r\n              />\r\n\r\n              <Mybutton title=\"Salvar\" customClick={register_user} />\r\n            </KeyboardAvoidingView>\r\n          </ScrollView>\r\n        </View>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  inputText: {\r\n    marginLeft: 25,\r\n    marginRight: 25,\r\n    marginTop: 10,\r\n    borderColor: '#00AD98',\r\n    borderWidth: 1,\r\n    height: 50,\r\n    padding: 10,\r\n    borderRadius: 20,\r\n  },\r\n});\r\n\r\nexport default RegisterFuncionario;"]},"metadata":{},"sourceType":"module"}