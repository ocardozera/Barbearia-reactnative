{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport Mytextinput from \"../components/Mytextinput\";\nimport Mybutton from \"../components/Mybutton\";\nimport { DatabaseConnection } from \"../../database/database-connection\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar db = DatabaseConnection.getConnection();\n\nvar UpdateServicoRealizado = function UpdateServicoRealizado(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputServicoId = _useState2[0],\n      setInputServicoId = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clienteNome = _useState4[0],\n      setClienteNome = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedValueFuncionario = _useState6[0],\n      setSelectedValueFuncionario = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedValueTipoServico = _useState8[0],\n      setSelectedValueTipoServico = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      listaFuncionarios = _useState10[0],\n      setListaFuncionarios = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      listaTipoServico = _useState12[0],\n      setListaTipoServico = _useState12[1];\n\n  var updateAllStates = function updateAllStates(name, contact, address) {\n    setClienteNome(name);\n    setSelectedValueFuncionario(contact);\n    setSelectedValueTipoServico(address);\n  };\n\n  useEffect(function () {\n    function fetchMyAPI() {\n      return _regeneratorRuntime.async(function fetchMyAPI$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              db.transaction(function (tx) {\n                tx.executeSql('SELECT * FROM table_funcionario', [], function (tx, results) {\n                  setListaFuncionarios(Array.from(results.rows));\n                });\n              });\n              db.transaction(function (tx) {\n                tx.executeSql('SELECT * FROM table_tipo_servico', [], function (tx, results) {\n                  setListaTipoServico(Array.from(results.rows));\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchMyAPI();\n  }, []);\n\n  var searchUser = function searchUser() {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT tbs.servico_realizado_id, tbs.cliente_nome,tbs.funcionario_id, tbs.tipo_servico_id FROM table_servico_realizado tbs, table_funcionario tf, table_tipo_servico tts WHERE tbs.servico_realizado_id = ? AND tbs.funcionario_id = tf.funcionario_id AND tbs.tipo_servico_id = tts.tipo_servico_id', [inputServicoId], function (tx, results) {\n        var len = results.rows.length;\n\n        if (len > 0) {\n          var res = results.rows.item(0);\n          updateAllStates(res.cliente_nome, res.funcionario_id, res.tipo_servico_id);\n        } else {\n          alert('Tipo de Servico não encontrado!');\n          updateAllStates('', '', '');\n        }\n      });\n    });\n  };\n\n  var updateUser = function updateUser() {\n    if (!inputServicoId) {\n      alert('Por Favor informe o Código!');\n      return;\n    }\n\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE table_tipo_servico set nome_servico=?, preco_servico=? where tipo_servico_id=?', [clienteNome, selectedValueFuncionario, inputServicoId], function (tx, results) {\n        console.log('Nome ', clienteNome);\n        console.log('id Funcionáro ', selectedValueFuncionario);\n        console.log('Input Servico ', inputServicoId);\n        console.log('Rows Affected ', results.rowsAffected);\n\n        if (results.rowsAffected > 0) {\n          Alert.alert('Sucesso', 'Serviço Realizado atualizado com sucesso !!', [{\n            text: 'Ok',\n            onPress: function onPress() {\n              return navigation.navigate('HomeScreenTipoServico');\n            }\n          }], {\n            cancelable: false\n          });\n        } else alert('Erro ao atualizar o Tipo de serviço');\n      });\n    });\n  };\n\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'white'\n      },\n      children: _jsx(View, {\n        style: {\n          flex: 1\n        },\n        children: _jsx(ScrollView, {\n          keyboardShouldPersistTaps: \"handled\",\n          children: _jsxs(KeyboardAvoidingView, {\n            behavior: \"padding\",\n            style: {\n              flex: 1,\n              justifyContent: 'space-between'\n            },\n            children: [_jsx(Mytextinput, {\n              placeholder: \"Digite o C\\xF3digo do Servi\\xE7o Realizado\",\n              style: {\n                padding: 10\n              },\n              onChangeText: function onChangeText(inputServicoId) {\n                return setInputServicoId(inputServicoId);\n              }\n            }), _jsx(Mybutton, {\n              title: \"Buscar Servi\\xE7o Realizado\",\n              customClick: searchUser\n            }), _jsx(Mytextinput, {\n              placeholder: \"Digite o Nome do Cliente\",\n              value: clienteNome,\n              style: {\n                padding: 10\n              },\n              onChangeText: function onChangeText(clienteNome) {\n                return setClienteNome(clienteNome);\n              }\n            }), _jsx(Picker, {\n              style: styles.button,\n              multiple: false,\n              selectedValue: selectedValueFuncionario,\n              onValueChange: function onValueChange(itemValue, itemIndex) {\n                return setSelectedValueFuncionario(itemValue);\n              },\n              children: listaFuncionarios.map(function (v) {\n                return _jsx(Picker.Item, {\n                  label: v.funcionario_nome,\n                  value: v.funcionario_id\n                }, v.funcionario_id);\n              })\n            }), _jsx(Picker, {\n              style: styles.button,\n              multiple: false,\n              selectedValue: selectedValueTipoServico,\n              onValueChange: function onValueChange(itemValue, itemIndex) {\n                return setSelectedValueTipoServico(itemValue);\n              },\n              children: listaTipoServico.map(function (v) {\n                return _jsx(Picker.Item, {\n                  label: v.nome_servico + \" - \" + v.preco_servico,\n                  value: v.tipo_servico_id\n                }, v.tipo_servico_id);\n              })\n            }), _jsx(Mybutton, {\n              title: \"Atualizar Tipo de Servi\\xE7o\",\n              customClick: updateUser\n            })]\n          })\n        })\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  inputText: {\n    marginLeft: 25,\n    marginRight: 25,\n    marginTop: 10,\n    borderColor: '#00AD98',\n    borderWidth: 1,\n    height: 50,\n    padding: 10,\n    borderRadius: 20\n  },\n  button: {\n    marginLeft: 25,\n    marginRight: 25,\n    marginTop: 10,\n    borderColor: '#00AD98',\n    borderWidth: 1,\n    borderRadius: 20,\n    right: 35\n  }\n});\nexport default UpdateServicoRealizado;","map":{"version":3,"sources":["F:/Programas/React/Barbearia-reactnative/src/pages/servico-realizado/UpdateServicoRealizado.js"],"names":["React","useEffect","useState","Mytextinput","Mybutton","DatabaseConnection","db","getConnection","UpdateServicoRealizado","navigation","inputServicoId","setInputServicoId","clienteNome","setClienteNome","selectedValueFuncionario","setSelectedValueFuncionario","selectedValueTipoServico","setSelectedValueTipoServico","listaFuncionarios","setListaFuncionarios","listaTipoServico","setListaTipoServico","updateAllStates","name","contact","address","fetchMyAPI","transaction","tx","executeSql","results","Array","from","rows","searchUser","len","length","res","item","cliente_nome","funcionario_id","tipo_servico_id","alert","updateUser","console","log","rowsAffected","Alert","text","onPress","navigate","cancelable","flex","backgroundColor","justifyContent","padding","styles","button","itemValue","itemIndex","map","v","funcionario_nome","nome_servico","preco_servico","StyleSheet","create","inputText","marginLeft","marginRight","marginTop","borderColor","borderWidth","height","borderRadius","right"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n    View,\r\n    ScrollView,\r\n    KeyboardAvoidingView,\r\n    Alert,\r\n    SafeAreaView, StyleSheet, Picker,\r\n} from 'react-native';\r\n\r\nimport Mytextinput from '../components/Mytextinput';\r\nimport Mybutton from '../components/Mybutton';\r\nimport { DatabaseConnection } from '../../database/database-connection';\r\n\r\nconst db = DatabaseConnection.getConnection();\r\n\r\nconst UpdateServicoRealizado = ({ navigation }) => {\r\n    let [inputServicoId, setInputServicoId] = useState('');\r\n    let [clienteNome, setClienteNome] = useState('');\r\n    let [selectedValueFuncionario, setSelectedValueFuncionario] = useState('');\r\n    let [selectedValueTipoServico, setSelectedValueTipoServico] = useState('');\r\n    let [listaFuncionarios, setListaFuncionarios] = useState([]);\r\n    let [listaTipoServico, setListaTipoServico] = useState([]);\r\n\r\n    let updateAllStates = (name, contact, address) => {\r\n        setClienteNome(name);\r\n        setSelectedValueFuncionario(contact);\r\n        setSelectedValueTipoServico(address);\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function fetchMyAPI() {\r\n            db.transaction((tx) => {\r\n                tx.executeSql(\r\n                    'SELECT * FROM table_funcionario',\r\n                    [],\r\n                    (tx, results) => {\r\n                        setListaFuncionarios(Array.from(results.rows));\r\n                    }\r\n                );\r\n            });\r\n\r\n            db.transaction((tx) => {\r\n                tx.executeSql(\r\n                    'SELECT * FROM table_tipo_servico',\r\n                    [],\r\n                    (tx, results) => {\r\n                        setListaTipoServico(Array.from(results.rows));\r\n                    }\r\n                );\r\n            });\r\n        }\r\n\r\n        fetchMyAPI()\r\n    }, [])\r\n\r\n    let searchUser = () => {\r\n        db.transaction((tx) => {\r\n            tx.executeSql(\r\n                'SELECT tbs.servico_realizado_id, tbs.cliente_nome,tbs.funcionario_id, tbs.tipo_servico_id FROM table_servico_realizado tbs, table_funcionario tf, table_tipo_servico tts WHERE tbs.servico_realizado_id = ? AND tbs.funcionario_id = tf.funcionario_id AND tbs.tipo_servico_id = tts.tipo_servico_id',\r\n                [inputServicoId],\r\n                (tx, results) => {\r\n                    var len = results.rows.length;\r\n                    if (len > 0) {\r\n                        let res = results.rows.item(0);\r\n                        updateAllStates(\r\n                            res.cliente_nome,\r\n                            res.funcionario_id,\r\n                            res.tipo_servico_id,\r\n                        );\r\n                    } else {\r\n                        alert('Tipo de Servico não encontrado!');\r\n                        updateAllStates('', '', '');\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    };\r\n    let updateUser = () => {\r\n        if (!inputServicoId) {\r\n            alert('Por Favor informe o Código!');\r\n            return;\r\n        }\r\n\r\n        db.transaction((tx) => {\r\n            tx.executeSql(\r\n                // 'UPDATE table_servico_realizado set cliente_nome=?, funcionario_id=?, tipo_servico_id=? where tipo_servico_id=?',\r\n                'UPDATE table_tipo_servico set nome_servico=?, preco_servico=? where tipo_servico_id=?',\r\n                [clienteNome, selectedValueFuncionario, inputServicoId],\r\n                (tx, results) => {\r\n                    console.log('Nome ', clienteNome);\r\n                    console.log('id Funcionáro ', selectedValueFuncionario);\r\n                    // console.log('id Tipo ',  selectedValueTipoServico);\r\n                    console.log('Input Servico ',  inputServicoId);\r\n                    console.log('Rows Affected ',  results.rowsAffected);\r\n                    if (results.rowsAffected > 0) {\r\n                        Alert.alert(\r\n                            'Sucesso',\r\n                            'Serviço Realizado atualizado com sucesso !!',\r\n                            [\r\n                                {\r\n                                    text: 'Ok',\r\n                                    onPress: () => navigation.navigate('HomeScreenTipoServico'),\r\n                                },\r\n                            ],\r\n                            { cancelable: false }\r\n                        );\r\n                    } else alert('Erro ao atualizar o Tipo de serviço');\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n            <View style={{ flex: 1, backgroundColor: 'white' }}>\r\n                <View style={{ flex: 1 }}>\r\n                    <ScrollView keyboardShouldPersistTaps=\"handled\">\r\n                        <KeyboardAvoidingView\r\n                            behavior=\"padding\"\r\n                            style={{ flex: 1, justifyContent: 'space-between' }}>\r\n                            <Mytextinput\r\n                                placeholder=\"Digite o Código do Serviço Realizado\"\r\n                                style={{ padding: 10 }}\r\n                                onChangeText={\r\n                                    (inputServicoId) => setInputServicoId(inputServicoId)\r\n                                }\r\n                            />\r\n                            <Mybutton\r\n                                title=\"Buscar Serviço Realizado\"\r\n                                customClick={searchUser}\r\n                            />\r\n                            <Mytextinput\r\n                                placeholder=\"Digite o Nome do Cliente\"\r\n                                value={clienteNome}\r\n                                style={{ padding: 10 }}\r\n                                onChangeText={\r\n                                    (clienteNome) => setClienteNome(clienteNome)\r\n                                }\r\n                            />\r\n\r\n                            <Picker\r\n                                style={styles.button}\r\n                                multiple={false}\r\n                                selectedValue={selectedValueFuncionario}\r\n                                onValueChange={(itemValue, itemIndex) => setSelectedValueFuncionario(itemValue)}>{\r\n                                listaFuncionarios.map((v) => (\r\n                                        <Picker.Item label={v.funcionario_nome} value={v.funcionario_id}\r\n                                                     key={v.funcionario_id}/>\r\n                                    )\r\n                                )\r\n                            }\r\n                            </Picker>\r\n\r\n                            <Picker\r\n                                style={styles.button}\r\n                                multiple={false}\r\n                                selectedValue={selectedValueTipoServico}\r\n                                onValueChange={(itemValue, itemIndex) => setSelectedValueTipoServico(itemValue)}>\r\n                                {listaTipoServico.map((v) => (\r\n                                        <Picker.Item label={v.nome_servico + \" - \" + v.preco_servico} value={v.tipo_servico_id}\r\n                                                     key={v.tipo_servico_id}/>\r\n                                    )\r\n                                )\r\n                                }\r\n                            </Picker>\r\n\r\n                            <Mybutton\r\n                                title=\"Atualizar Tipo de Serviço\"\r\n                                customClick={updateUser}\r\n                            />\r\n                        </KeyboardAvoidingView>\r\n                    </ScrollView>\r\n                </View>\r\n            </View>\r\n        </SafeAreaView>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    inputText: {\r\n        marginLeft: 25,\r\n        marginRight: 25,\r\n        marginTop: 10,\r\n        borderColor: '#00AD98',\r\n        borderWidth: 1,\r\n        height: 50,\r\n        padding: 10,\r\n        borderRadius: 20,\r\n    },\r\n    button: {\r\n        marginLeft: 25,\r\n        marginRight: 25,\r\n        marginTop: 10,\r\n        borderColor: '#00AD98',\r\n        borderWidth: 1,\r\n        borderRadius: 20,\r\n        right: 35,\r\n    },\r\n});\r\n\r\nexport default UpdateServicoRealizado;"]},"metadata":{},"sourceType":"module"}