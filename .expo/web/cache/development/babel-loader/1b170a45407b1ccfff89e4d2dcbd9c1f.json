{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Programas\\\\React\\\\Barbearia-reactnative\\\\src\\\\pages\\\\funcionario\\\\UpdateFuncionario.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Mytext from \"../components/Mytext\";\nimport Mytextinput from \"../components/Mytextinput\";\nimport Mybutton from \"../components/Mybutton\";\nimport { DatabaseConnection } from \"../../database/database-connection\";\nimport { TextInputMask } from \"react-native-masked-text\";\nvar db = DatabaseConnection.getConnection();\n\nvar UpdateFuncionario = function UpdateFuncionario(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputUserId = _useState2[0],\n      setInputUserId = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userName = _useState4[0],\n      setUserName = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userContact = _useState6[0],\n      setUserContact = _useState6[1];\n\n  var updateAllStates = function updateAllStates(name, contact) {\n    setUserName(name);\n    setUserContact(contact);\n  };\n\n  var searchUser = function searchUser() {\n    console.log(inputUserId);\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM table_funcionario where funcionario_id = ?', [inputUserId], function (tx, results) {\n        var len = results.rows.length;\n\n        if (len > 0) {\n          var res = results.rows.item(0);\n          updateAllStates(res.funcionario_nome, res.funcionario_telefone);\n        } else {\n          alert('Funcionario não encontrado!');\n          updateAllStates('', '', '');\n        }\n      });\n    });\n  };\n\n  var updateUser = function updateUser() {\n    console.log(inputUserId, userName, userContact);\n\n    if (!inputUserId) {\n      alert('Por Favor informe o Código!');\n      return;\n    }\n\n    if (!userName) {\n      alert('Por favor informe o Nome !');\n      return;\n    }\n\n    if (userName.length < 8) {\n      alert('Nome deve ser possuír ao menos 8 dígitos!');\n      return;\n    }\n\n    if (!userContact) {\n      alert('Por favor preencha o telefone');\n      return;\n    }\n\n    if (userContact.length < 14) {\n      alert('Por favor, preencha o telefone com todos os dígitos');\n      return;\n    }\n\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE table_funcionario set funcionario_nome=?, funcionario_telefone=? where funcionario_id=?', [userName, userContact, inputUserId], function (tx, results) {\n        console.log('Results', results.rowsAffected);\n\n        if (results.rowsAffected > 0) {\n          Alert.alert('Sucesso', 'Funcionario atualizado com sucesso !!', [{\n            text: 'Ok',\n            onPress: function onPress() {\n              return navigation.navigate('HomeScreenFuncionario');\n            }\n          }], {\n            cancelable: false\n          });\n        } else alert('Erro ao atualizar o Funcionario');\n      });\n    });\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    keyboardShouldPersistTaps: \"handled\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    behavior: \"padding\",\n    style: {\n      flex: 1,\n      justifyContent: 'space-between'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, React.createElement(Mytextinput, {\n    placeholder: \"Digite o C\\xF3digo do Funcion\\xE1rio\",\n    style: {\n      padding: 10\n    },\n    onChangeText: function onChangeText(inputUserId) {\n      return setInputUserId(inputUserId);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }), React.createElement(Mybutton, {\n    title: \"Buscar Funcionario\",\n    customClick: searchUser,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }), React.createElement(Mytextinput, {\n    placeholder: \"Entre com o Nome\",\n    value: userName,\n    style: {\n      padding: 10\n    },\n    onChangeText: function onChangeText(userName) {\n      return setUserName(userName);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }), React.createElement(TextInputMask, {\n    placeholder: \"Telefone com Apenas N\\xFAmeros\",\n    maxLength: 15,\n    keyboardType: \"numeric\",\n    blurOnSubmit: false,\n    underlineColorAndroid: \"transparent\",\n    placeholderTextColor: \"#00AD98\",\n    style: styles.inputText,\n    type: 'cel-phone',\n    options: {\n      maskType: 'BRL',\n      withDDD: true,\n      dddMask: '(99) '\n    },\n    value: '' + userContact,\n    onChangeText: function onChangeText(userContact) {\n      return setUserContact(userContact);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }), React.createElement(Mybutton, {\n    title: \"Atualizar Funcion\\xE1rio\",\n    customClick: updateUser,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nvar styles = StyleSheet.create({\n  inputText: {\n    marginLeft: 25,\n    marginRight: 25,\n    marginTop: 10,\n    borderColor: '#00AD98',\n    borderWidth: 1,\n    height: 50,\n    padding: 10,\n    borderRadius: 20\n  }\n});\nexport default UpdateFuncionario;","map":{"version":3,"sources":["F:/Programas/React/Barbearia-reactnative/src/pages/funcionario/UpdateFuncionario.js"],"names":["React","useState","Mytext","Mytextinput","Mybutton","DatabaseConnection","TextInputMask","db","getConnection","UpdateFuncionario","navigation","inputUserId","setInputUserId","userName","setUserName","userContact","setUserContact","updateAllStates","name","contact","searchUser","console","log","transaction","tx","executeSql","results","len","rows","length","res","item","funcionario_nome","funcionario_telefone","alert","updateUser","rowsAffected","Alert","text","onPress","navigate","cancelable","flex","backgroundColor","justifyContent","padding","styles","inputText","maskType","withDDD","dddMask","StyleSheet","create","marginLeft","marginRight","marginTop","borderColor","borderWidth","height","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  View,\r\n  ScrollView,\r\n  KeyboardAvoidingView,\r\n  Alert,\r\n  SafeAreaView,\r\n  Text, StyleSheet,\r\n} from 'react-native';\r\n\r\nimport Mytext from '../components/Mytext';\r\nimport Mytextinput from '../components/Mytextinput';\r\nimport Mybutton from '../components/Mybutton';\r\nimport { DatabaseConnection } from '../../database/database-connection';\r\nimport {TextInputMask} from \"react-native-masked-text\";\r\n\r\nconst db = DatabaseConnection.getConnection();\r\n\r\nconst UpdateFuncionario = ({ navigation }) => {\r\n  let [inputUserId, setInputUserId] = useState('');\r\n  let [userName, setUserName] = useState('');\r\n  let [userContact, setUserContact] = useState('');\r\n\r\n  let updateAllStates = (name, contact) => {\r\n    setUserName(name);\r\n    setUserContact(contact);\r\n  };\r\n\r\n  let searchUser = () => {\r\n    console.log(inputUserId);\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM table_funcionario where funcionario_id = ?',\r\n        [inputUserId],\r\n        (tx, results) => {\r\n          var len = results.rows.length;\r\n          if (len > 0) {\r\n            let res = results.rows.item(0);\r\n            updateAllStates(\r\n              res.funcionario_nome,\r\n              res.funcionario_telefone\r\n            );\r\n          } else {\r\n            alert('Funcionario não encontrado!');\r\n            updateAllStates('', '', '');\r\n          }\r\n        }\r\n      );\r\n    });\r\n  };\r\n  let updateUser = () => {\r\n    console.log(inputUserId, userName, userContact);\r\n\r\n    if (!inputUserId) {\r\n      alert('Por Favor informe o Código!');\r\n      return;\r\n    }\r\n    if (!userName) {\r\n      alert('Por favor informe o Nome !');\r\n      return;\r\n    }\r\n    if (userName.length < 8) {\r\n      alert('Nome deve ser possuír ao menos 8 dígitos!');\r\n      return;\r\n    }\r\n    if (!userContact) {\r\n      alert('Por favor preencha o telefone');\r\n      return;\r\n    }\r\n    if (userContact.length < 14) {\r\n      alert('Por favor, preencha o telefone com todos os dígitos');\r\n      return;\r\n    }\r\n\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'UPDATE table_funcionario set funcionario_nome=?, funcionario_telefone=? where funcionario_id=?',\r\n        [userName, userContact, inputUserId],\r\n        (tx, results) => {\r\n          console.log('Results', results.rowsAffected);\r\n          if (results.rowsAffected > 0) {\r\n            Alert.alert(\r\n              'Sucesso',\r\n              'Funcionario atualizado com sucesso !!',\r\n              [\r\n                {\r\n                  text: 'Ok',\r\n                  onPress: () => navigation.navigate('HomeScreenFuncionario'),\r\n                },\r\n              ],\r\n              { cancelable: false }\r\n            );\r\n          } else alert('Erro ao atualizar o Funcionario');\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={{ flex: 1 }}>\r\n      <View style={{ flex: 1, backgroundColor: 'white' }}>\r\n        <View style={{ flex: 1 }}>\r\n          <ScrollView keyboardShouldPersistTaps=\"handled\">\r\n            <KeyboardAvoidingView\r\n              behavior=\"padding\"\r\n              style={{ flex: 1, justifyContent: 'space-between' }}>\r\n              <Mytextinput\r\n                placeholder=\"Digite o Código do Funcionário\"\r\n                style={{ padding: 10 }}\r\n                onChangeText={\r\n                  (inputUserId) => setInputUserId(inputUserId)\r\n                }\r\n              />\r\n              <Mybutton\r\n                title=\"Buscar Funcionario\"\r\n                customClick={searchUser}\r\n              />\r\n              <Mytextinput\r\n                placeholder=\"Entre com o Nome\"\r\n                value={userName}\r\n                style={{ padding: 10 }}\r\n                onChangeText={\r\n                  (userName) => setUserName(userName)\r\n                }\r\n              />\r\n              <TextInputMask\r\n                  placeholder=\"Telefone com Apenas Números\"\r\n                  maxLength={15}\r\n                  keyboardType=\"numeric\"\r\n                  blurOnSubmit={false}\r\n                  underlineColorAndroid=\"transparent\"\r\n                  placeholderTextColor=\"#00AD98\"\r\n                  style={styles.inputText}\r\n                  type={'cel-phone'}\r\n                  options={{\r\n                    maskType: 'BRL',\r\n                    withDDD: true,\r\n                    dddMask: '(99) '\r\n                  }}\r\n                  value={'' + userContact}\r\n                  onChangeText={\r\n                    (userContact) => setUserContact(userContact)\r\n                  }\r\n              />\r\n              <Mybutton\r\n                title=\"Atualizar Funcionário\"\r\n                customClick={updateUser}\r\n              />\r\n            </KeyboardAvoidingView>\r\n          </ScrollView>\r\n        </View>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  inputText: {\r\n    marginLeft: 25,\r\n    marginRight: 25,\r\n    marginTop: 10,\r\n    borderColor: '#00AD98',\r\n    borderWidth: 1,\r\n    height: 50,\r\n    padding: 10,\r\n    borderRadius: 20,\r\n  },\r\n});\r\n\r\nexport default UpdateFuncionario;"]},"metadata":{},"sourceType":"module"}