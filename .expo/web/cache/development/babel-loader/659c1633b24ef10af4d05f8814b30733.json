{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Mytextinput from \"../components/Mytextinput\";\nimport Mybutton from \"../components/Mybutton\";\nimport { DatabaseConnection } from \"../../database/database-connection\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar db = DatabaseConnection.getConnection();\n\nvar UpdateServicoRealizado = function UpdateServicoRealizado(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputServicoId = _useState2[0],\n      setInputServicoId = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clienteNome = _useState4[0],\n      setClienteNome = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      servicoIdFuncionario = _useState6[0],\n      setServicoIdFuncionario = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      servicoIdTipo = _useState8[0],\n      setServicoIdTipo = _useState8[1];\n\n  var updateAllStates = function updateAllStates(name, contact, address) {\n    setClienteNome(name);\n    setServicoIdFuncionario(contact);\n    setServicoIdTipo(address);\n  };\n\n  var searchUser = function searchUser() {\n    console.log(inputServicoId);\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT tbs.servico_realizado_id, tbs.cliente_nome, tf.funcionario_nome, tts.nome_servico, tts.preco_servico FROM table_servico_realizado tbs, table_funcionario tf, table_tipo_servico tts WHERE tbs.servico_realizado_id = ? AND tbs.funcionario_id = tf.funcionario_id AND tbs.tipo_servico_id = tts.tipo_servico_id', [inputServicoId], function (tx, results) {\n        var len = results.rows.length;\n\n        if (len > 0) {\n          var res = results.rows.item(0);\n          updateAllStates(res.cliente_nome, res.funcionario_id, res.tipo_servico_id);\n        } else {\n          alert('Tipo de Servico não encontrado!');\n          updateAllStates('', '', '');\n        }\n      });\n    });\n  };\n\n  var updateUser = function updateUser() {\n    console.log(inputServicoId, clienteNome);\n\n    if (!inputServicoId) {\n      alert('Por Favor informe o Código!');\n      return;\n    }\n\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE table_servico_realizado set cliente_nome=?, funcionario_id=?, tipo_servico_id=? where tipo_servico_id=?', [clienteNome, servicoPreco, servicoIdFuncionario, servicoIdTipo, inputServicoId], function (tx, results) {\n        console.log('Results', results.rowsAffected);\n\n        if (results.rowsAffected > 0) {\n          Alert.alert('Sucesso', 'Serviço Realizado atualizado com sucesso !!', [{\n            text: 'Ok',\n            onPress: function onPress() {\n              return navigation.navigate('HomeScreenTipoServico');\n            }\n          }], {\n            cancelable: false\n          });\n        } else alert('Erro ao atualizar o Tipo de serviço');\n      });\n    });\n  };\n\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'white'\n      },\n      children: _jsx(View, {\n        style: {\n          flex: 1\n        },\n        children: _jsx(ScrollView, {\n          keyboardShouldPersistTaps: \"handled\",\n          children: _jsxs(KeyboardAvoidingView, {\n            behavior: \"padding\",\n            style: {\n              flex: 1,\n              justifyContent: 'space-between'\n            },\n            children: [_jsx(Mytextinput, {\n              placeholder: \"Digite o C\\xF3digo do Servi\\xE7o Realizado\",\n              style: {\n                padding: 10\n              },\n              onChangeText: function onChangeText(inputServicoId) {\n                return setInputServicoId(inputServicoId);\n              }\n            }), _jsx(Mybutton, {\n              title: \"Buscar Tipo de Servi\\xE7o\",\n              customClick: searchUser\n            }), _jsx(Mytextinput, {\n              placeholder: \"Digite o Nome do Cliente\",\n              value: clienteNome,\n              style: {\n                padding: 10\n              },\n              onChangeText: function onChangeText(clienteNome) {\n                return setClienteNome(clienteNome);\n              }\n            }), _jsx(Mybutton, {\n              title: \"Atualizar Tipo de Servi\\xE7o\",\n              customClick: updateUser\n            })]\n          })\n        })\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  inputText: {\n    marginLeft: 25,\n    marginRight: 25,\n    marginTop: 10,\n    borderColor: '#00AD98',\n    borderWidth: 1,\n    height: 50,\n    padding: 10,\n    borderRadius: 20\n  }\n});\nexport default UpdateServicoRealizado;","map":{"version":3,"sources":["F:/Programas/React/Barbearia-reactnative/src/pages/tipo-servico/UpdateTipoServico.js"],"names":["React","useState","Mytextinput","Mybutton","DatabaseConnection","db","getConnection","UpdateServicoRealizado","navigation","inputServicoId","setInputServicoId","clienteNome","setClienteNome","servicoIdFuncionario","setServicoIdFuncionario","servicoIdTipo","setServicoIdTipo","updateAllStates","name","contact","address","searchUser","console","log","transaction","tx","executeSql","results","len","rows","length","res","item","cliente_nome","funcionario_id","tipo_servico_id","alert","updateUser","servicoPreco","rowsAffected","Alert","text","onPress","navigate","cancelable","flex","backgroundColor","justifyContent","padding","styles","StyleSheet","create","inputText","marginLeft","marginRight","marginTop","borderColor","borderWidth","height","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    View,\r\n    ScrollView,\r\n    KeyboardAvoidingView,\r\n    Alert,\r\n    SafeAreaView, StyleSheet,\r\n} from 'react-native';\r\n\r\nimport Mytextinput from '../components/Mytextinput';\r\nimport Mybutton from '../components/Mybutton';\r\nimport { DatabaseConnection } from '../../database/database-connection';\r\n\r\nconst db = DatabaseConnection.getConnection();\r\n\r\nconst UpdateServicoRealizado = ({ navigation }) => {\r\n    let [inputServicoId, setInputServicoId] = useState('');\r\n    let [clienteNome, setClienteNome] = useState('');\r\n    let [servicoIdFuncionario, setServicoIdFuncionario] = useState('');\r\n    let [servicoIdTipo, setServicoIdTipo] = useState('');\r\n\r\n    let updateAllStates = (name, contact, address) => {\r\n        setClienteNome(name);\r\n        setServicoIdFuncionario(contact);\r\n        setServicoIdTipo(address);\r\n    };\r\n\r\n        let searchUser = () => {\r\n        console.log(inputServicoId);\r\n        db.transaction((tx) => {\r\n            tx.executeSql(\r\n                'SELECT tbs.servico_realizado_id, tbs.cliente_nome, tf.funcionario_nome, tts.nome_servico, tts.preco_servico FROM table_servico_realizado tbs, table_funcionario tf, table_tipo_servico tts WHERE tbs.servico_realizado_id = ? AND tbs.funcionario_id = tf.funcionario_id AND tbs.tipo_servico_id = tts.tipo_servico_id',\r\n                [inputServicoId],\r\n                (tx, results) => {\r\n                    var len = results.rows.length;\r\n                    if (len > 0) {\r\n                        let res = results.rows.item(0);\r\n                        updateAllStates(\r\n                            res.cliente_nome,\r\n                            res.funcionario_id,\r\n                            res.tipo_servico_id,\r\n                        );\r\n                    } else {\r\n                        alert('Tipo de Servico não encontrado!');\r\n                        updateAllStates('', '', '');\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    };\r\n    let updateUser = () => {\r\n        console.log(inputServicoId, clienteNome);\r\n\r\n        if (!inputServicoId) {\r\n            alert('Por Favor informe o Código!');\r\n            return;\r\n        }\r\n\r\n        db.transaction((tx) => {\r\n            tx.executeSql(\r\n                'UPDATE table_servico_realizado set cliente_nome=?, funcionario_id=?, tipo_servico_id=? where tipo_servico_id=?',\r\n                [clienteNome, servicoPreco, servicoIdFuncionario, servicoIdTipo, inputServicoId],\r\n                (tx, results) => {\r\n                    console.log('Results', results.rowsAffected);\r\n                    if (results.rowsAffected > 0) {\r\n                        Alert.alert(\r\n                            'Sucesso',\r\n                            'Serviço Realizado atualizado com sucesso !!',\r\n                            [\r\n                                {\r\n                                    text: 'Ok',\r\n                                    onPress: () => navigation.navigate('HomeScreenTipoServico'),\r\n                                },\r\n                            ],\r\n                            { cancelable: false }\r\n                        );\r\n                    } else alert('Erro ao atualizar o Tipo de serviço');\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n            <View style={{ flex: 1, backgroundColor: 'white' }}>\r\n                <View style={{ flex: 1 }}>\r\n                    <ScrollView keyboardShouldPersistTaps=\"handled\">\r\n                        <KeyboardAvoidingView\r\n                            behavior=\"padding\"\r\n                            style={{ flex: 1, justifyContent: 'space-between' }}>\r\n                            <Mytextinput\r\n                                placeholder=\"Digite o Código do Serviço Realizado\"\r\n                                style={{ padding: 10 }}\r\n                                onChangeText={\r\n                                    (inputServicoId) => setInputServicoId(inputServicoId)\r\n                                }\r\n                            />\r\n                            <Mybutton\r\n                                title=\"Buscar Tipo de Serviço\"\r\n                                customClick={searchUser}\r\n                            />\r\n                            <Mytextinput\r\n                                placeholder=\"Digite o Nome do Cliente\"\r\n                                value={clienteNome}\r\n                                style={{ padding: 10 }}\r\n                                onChangeText={\r\n                                    (clienteNome) => setClienteNome(clienteNome)\r\n                                }\r\n                            />\r\n                            <Mybutton\r\n                                title=\"Atualizar Tipo de Serviço\"\r\n                                customClick={updateUser}\r\n                            />\r\n                        </KeyboardAvoidingView>\r\n                    </ScrollView>\r\n                </View>\r\n            </View>\r\n        </SafeAreaView>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    inputText: {\r\n        marginLeft: 25,\r\n        marginRight: 25,\r\n        marginTop: 10,\r\n        borderColor: '#00AD98',\r\n        borderWidth: 1,\r\n        height: 50,\r\n        padding: 10,\r\n        borderRadius: 20,\r\n    },\r\n});\r\n\r\nexport default UpdateServicoRealizado;"]},"metadata":{},"sourceType":"module"}